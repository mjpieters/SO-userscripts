// ==UserScript==
// @name        Bookmark Users
// @version     1.0.1
// @author      Martijn Pieters
// @description Shows what user bookmarked a question. Fetches the bookmarking users from the StackExchange data explorer (data can be up to a week old)
// @homepage    https://github.com/mjpieters/SO-userscripts
// @supportURL  https://github.com/mjpieters/SO-userscripts/issues
// @match       http*://*.stackoverflow.com/questions/*
// @match       http*://*.serverfault.com/questions/*
// @match       http*://*.superuser.com/questions/*
// @match       http*://*.askubuntu.com/questions/*
// @match       http*://*.mathoverflow.net/questions/*
// @match       http*://*.stackexchange.com/questions/*
// @namespace   https://github.com/mjpieters/SO-userscripts
// @downloadURL https://github.com/mjpieters/SO-userscripts/raw/3fbb848853acf7b5339195d701ca57d31d9076c1/distbookmark-users.user.js
// @updateURL   https://github.com/mjpieters/SO-userscripts/raw/main/distbookmark-users.user.js
// @grant       GM_xmlhttpRequest
// @grant       GM_addStyle
// @connect     data.stackexchange.com
// ==/UserScript==

(()=>{"use strict";var e={863:(e,t,r)=>{r.r(t),r.d(t,{TemplateTag:()=>c,codeBlock:()=>$,commaLists:()=>_,commaListsAnd:()=>S,commaListsOr:()=>k,html:()=>$,inlineArrayTransformer:()=>v,inlineLists:()=>L,oneLine:()=>A,oneLineCommaLists:()=>j,oneLineCommaListsAnd:()=>E,oneLineCommaListsOr:()=>T,oneLineInlineLists:()=>M,oneLineTrim:()=>I,removeNonPrintingValuesTransformer:()=>w,replaceResultTransformer:()=>f,replaceStringTransformer:()=>h,replaceSubstitutionTransformer:()=>p,safeHtml:()=>x,source:()=>$,splitStringTransformer:()=>y,stripIndent:()=>O,stripIndentTransformer:()=>m,stripIndents:()=>P,trimResultTransformer:()=>u});var n,s,a=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=(n=["",""],s=["",""],Object.freeze(Object.defineProperties(n,{raw:{value:Object.freeze(s)}})));function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var l=function(){function e(){for(var t=this,r=arguments.length,n=Array(r),s=0;s<r;s++)n[s]=arguments[s];return i(this,e),this.tag=function(e){for(var r=arguments.length,n=Array(r>1?r-1:0),s=1;s<r;s++)n[s-1]=arguments[s];return"function"==typeof e?t.interimTag.bind(t,e):"string"==typeof e?t.transformEndResult(e):(e=e.map(t.transformString.bind(t)),t.transformEndResult(e.reduce(t.processSubstitutions.bind(t,n))))},n.length>0&&Array.isArray(n[0])&&(n=n[0]),this.transformers=n.map((function(e){return"function"==typeof e?e():e})),this.tag}return a(e,[{key:"interimTag",value:function(e,t){for(var r=arguments.length,n=Array(r>2?r-2:0),s=2;s<r;s++)n[s-2]=arguments[s];return this.tag(o,e.apply(void 0,[t].concat(n)))}},{key:"processSubstitutions",value:function(e,t,r){var n=this.transformSubstitution(e.shift(),t);return"".concat(t,n,r)}},{key:"transformString",value:function(e){return this.transformers.reduce((function(e,t){return t.onString?t.onString(e):e}),e)}},{key:"transformSubstitution",value:function(e,t){return this.transformers.reduce((function(e,r){return r.onSubstitution?r.onSubstitution(e,t):e}),e)}},{key:"transformEndResult",value:function(e){return this.transformers.reduce((function(e,t){return t.onEndResult?t.onEndResult(e):e}),e)}}]),e}();const c=l,u=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return{onEndResult:function(t){if(""===e)return t.trim();if("start"===(e=e.toLowerCase())||"left"===e)return t.replace(/^\s*/,"");if("end"===e||"right"===e)return t.replace(/\s*$/,"");throw new Error("Side not supported: "+e)}}};function d(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)}const m=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"initial";return{onEndResult:function(t){if("initial"===e){var r=t.match(/^[^\S\n]*(?=\S)/gm),n=r&&Math.min.apply(Math,d(r.map((function(e){return e.length}))));if(n){var s=new RegExp("^.{"+n+"}","gm");return t.replace(s,"")}return t}if("all"===e)return t.replace(/^[^\S\n]+/gm,"");throw new Error("Unknown type: "+e)}}},f=function(e,t){return{onEndResult:function(r){if(null==e||null==t)throw new Error("replaceResultTransformer requires at least 2 arguments.");return r.replace(e,t)}}},p=function(e,t){return{onSubstitution:function(r,n){if(null==e||null==t)throw new Error("replaceSubstitutionTransformer requires at least 2 arguments.");return null==r?r:r.toString().replace(e,t)}}},h=function(e,t){return{onString:function(r){if(null==e||null==t)throw new Error("replaceStringTransformer requires at least 2 arguments.");return r.replace(e,t)}}};var g={separator:"",conjunction:"",serial:!1};const v=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:g;return{onSubstitution:function(t,r){if(Array.isArray(t)){var n=t.length,s=e.separator,a=e.conjunction,o=e.serial,i=r.match(/(\n?[^\S\n]+)$/);if(t=i?t.join(s+i[1]):t.join(s+" "),a&&n>1){var l=t.lastIndexOf(s);t=t.slice(0,l)+(o?s:"")+" "+a+t.slice(l+1)}}return t}}},y=function(e){return{onSubstitution:function(t,r){if(null==e||"string"!=typeof e)throw new Error("You need to specify a string character to split by.");return"string"==typeof t&&t.includes(e)&&(t=t.split(e)),t}}};var b=function(e){return null!=e&&!Number.isNaN(e)&&"boolean"!=typeof e};const w=function(){return{onSubstitution:function(e){return Array.isArray(e)?e.filter(b):b(e)?e:""}}},_=new c(v({separator:","}),m,u),S=new c(v({separator:",",conjunction:"and"}),m,u),k=new c(v({separator:",",conjunction:"or"}),m,u),$=new c(y("\n"),w,v,m,u),x=new c(y("\n"),v,m,u,p(/&/g,"&amp;"),p(/</g,"&lt;"),p(/>/g,"&gt;"),p(/"/g,"&quot;"),p(/'/g,"&#x27;"),p(/`/g,"&#x60;")),A=new c(f(/(?:\n(?:\s*))+/g," "),u),I=new c(f(/(?:\n\s*)/g,""),u),j=new c(v({separator:","}),f(/(?:\s+)/g," "),u),T=new c(v({separator:",",conjunction:"or"}),f(/(?:\s+)/g," "),u),E=new c(v({separator:",",conjunction:"and"}),f(/(?:\s+)/g," "),u),L=new c(v,m,u),M=new c(v,f(/(?:\s+)/g," "),u),O=new c(m,u),P=new c(m("all"),u)},584:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.userStyles=t.controllerId=t.sedeQueryId=t.sedeUrl=t.minimalUserFilter=t.seApiUrl=t.seApiKey=void 0,t.seApiKey="9VvY5KWke5mKcflYkx)NDw((",t.seApiUrl="https://api.stackexchange.com/2.3",t.minimalUserFilter="!)69QNaSIc2a*QW(ccD0ph0dVbliY",t.sedeUrl="https://data.stackexchange.com/",t.sedeQueryId="1894927",t.controllerId="us-bookmarkers",t.userStyles=`\n.${t.controllerId}-content { min-height: min-content; }\n.${t.controllerId}-popover .s-user-card__minimal .anonymous-gravatar {\n  zoom:0.5;\n  -moz-transform:scale(0.5);\n  -moz-transform-origin: 0 0;\n}\n.${t.controllerId}-popover .s-user-card__minimal .s-user-card--time {\n  font-variant-numeric: tabular-nums;\n}\n`},730:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BookmarkersController=void 0;const n=r(863),s=r(8),a=r(432),o=r(584),i=n.html`
  <button
    class="s-btn s-btn__unset c-pointer py4"
    data-controller="s-tooltip ${o.controllerId}"
    data-s-popover-toggle-class="fc-yellow-600"
    data-s-tooltip-placement="right"
    data-action="click->s-popover#toggle s-popover:show->${o.controllerId}#showBookmarkers"
    aria-pressed="false"
    title="Show who bookmarked this question."
  ></button>
`,l=n.html`
  <div
    class="${o.controllerId}-popover s-popover"
    role="dialog"
    aria-hidden="true"
  >
    <div class="s-popover--arrow"></div>
    <div class="m4 hmx3 wmx100 overflow-x-hidden overflow-y-auto">
      <div
        class="${o.controllerId}-popover-inner d-flex fd-column flex__center gs8 gsy"
      >
        <ul class="list-reset flex--item mr-auto"></ul>
        <div class="s-spinner s-spinner__sm flex--item">
          <div class="v-visible-sr">Loadingâ€¦</div>
        </div>
      </div>
    </div>
  </div>
`;class c extends Stacks.StacksController{constructor(){super(...arguments),this.state="initial"}static attach(e){null!==e.querySelector(".js-bookmark-count")?.offsetParent&&(e.insertAdjacentHTML("afterend",i),e.nextElementSibling?.insertAdjacentElement("beforeend",Svg.Person()[0]),Stacks.application.register(o.controllerId,c))}connect(){"initial"===this.state&&(this.state="attached",Stacks.attachPopover(this.element,l),this.popoverElement=document.getElementById(this.element.getAttribute("aria-controls")))}async showBookmarkers(){if("attached"!==this.state)return;this.state="loading";const e=this.popoverElement.querySelector("ul"),t=StackExchange.question.getQuestionId(),r=await(0,s.fetchBookmarkers)(t),n=new Map(r.map((e=>[e.userId,e.date])));for await(const t of(0,a.fetchUsers)(r.map((e=>e.userId)),!0))e.insertAdjacentHTML("beforeend",`<li class="mb4">${t.toHTML(n.get(t.user_id.toFixed(0)))}</li>`);this.state="loaded",this.popoverElement.querySelector(".s-spinner").remove()}}t.BookmarkersController=c},8:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.fetchBookmarkers=void 0;const n=r(584),s=r(209);t.fetchBookmarkers=function(e){const t=(0,s.getSiteId)();return new Promise(((r,s)=>{GM_xmlhttpRequest({method:"GET",url:`${n.sedeUrl}/${t}/csv/${n.sedeQueryId}?postId=${e}`,fetch:!0,onload:e=>{200!==e.status&&s(new Error(`invalid response ${e}`));const t=e.responseText.split(/\r?\n/).filter(Boolean);t.shift(),r(t.map((e=>{const[t,r]=e.replaceAll('"',"").split(",");return{date:t.split(" ")[0],userId:r}})))}})}))}},432:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.fetchUsers=void 0;const n=r(863),s=r(209),a=r(584),o=new Intl.NumberFormat("en-US",{notation:"compact",maximumSignificantDigits:3}),i=new Intl.NumberFormat("en-US",{useGrouping:!0});class l{get badges(){const e=[];switch(this.is_employee&&e.push(n.html`<span class="s-badge s-badge__staff s-badge__xs">Staff</span>`),this.user_type){case"moderator":e.push(n.html`<span class="s-badge s-badge__moderator s-badge__xs">Mod</span>`);break;case"team_admin":e.push(n.html`<span class="s-badge s-badge__admin s-badge__xs">Admin</span>`)}return e}get abbreviated_reputation(){return this.reputation<1e4?i.format(this.reputation):o.format(this.reputation).toLowerCase()}toHTML(e){return n.html`
      <div class="s-user-card s-user-card__minimal">
        <time class="s-user-card--time">${e}</time>
        <a href="${this.link}" class="s-avatar s-user-card--avatar">
          <img class="s-avatar--image" src="${this.profile_image}" />
        </a>
        <div class="s-user-card--info">
          <a href="${this.link}" class="s-user-card--link"
            >${this.display_name} ${this.badges}</a
          >
          <ul class="s-user-card--awards">
            <li
              class="s-user-card--rep"
              title="reputation score ${i.format(this.reputation)}"
            >
              ${this.abbreviated_reputation}
            </li>
          </ul>
        </div>
      </div>
    `}}class c extends l{constructor(e){super(),this.user_id=parseInt(e),this.link=`/users/${e}`}toHTML(e){return StackExchange.options.user.isModerator?n.html`
        <div class="s-user-card s-user-card__minimal s-user-card__deleted">
          <time class="s-user-card--time">${e}</time>
          <a href="${this.link}" class="s-avatar s-user-card--avatar">
            <span class="anonymous-gravatar"></span>
          </a>
          <div class="s-user-card--info">
            <a href="${this.link}" class="s-user-card--link"
              >user${this.user_id}</a
            >
          </div>
        </div>
      `:n.html`
      <div class="s-user-card s-user-card__minimal s-user-card__deleted">
        <time class="s-user-card--time">${e}</time>
        <div class="s-avatar s-user-card--avatar">
          <span class="anonymous-gravatar"></span>
        </a>
        <div class="s-user-card--info">
          <div class="s-user-card--link">user${this.user_id}</a>
        </div>
      </div>
    `}}t.fetchUsers=async function*(e,t=!1){for(;e.length>0;){const r=e.splice(0,100);e=e.splice(100);const n=await(0,s.seApiFetch)(`users/${r.join(";")}`,a.minimalUserFilter),o=new Map(n.map((e=>[e.user_id.toFixed(0),Object.assign(new l,e)])));yield*r.reduce(((e,r)=>{let n=o.get(r);return void 0===n&&t&&(n=new c(r)),n?[...e,n]:e}),[])}}},209:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.seApiFetch=t.delay=t.getSiteId=void 0;const n=r(584);function s(){return location.hostname.replace(/(\.stackexchange)?\.com$/,"")}function a(e){return new Promise((t=>setTimeout(t,e)))}t.getSiteId=s,t.delay=a;const o=new Map;t.seApiFetch=async function(e,...[t]){const r=new URL(`${n.seApiUrl}/${e}`);r.search=new URLSearchParams({...t&&{filter:t},key:n.seApiKey,site:s(),pagesize:"100"}).toString();const i=(o.get(e)??0)-(new Date).getTime();i>0&&await a(i);const l=await fetch(r.toString()),c=await l.json();if(o.set(e,(new Date).getTime()+c.backoff??0),c.error_id)throw new Error(`${c.error_name} (${c.error_id}): ${c.error_message}`);return c.items}}},t={};function r(n){var s=t[n];if(void 0!==s)return s.exports;var a=t[n]={exports:{}};return e[n](a,a.exports,r),a.exports}r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{const e=r(584),t=r(730);!async function(){GM_addStyle(e.userStyles);const r=document.querySelector(".js-bookmark-btn");t.BookmarkersController.attach(r)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,